/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.hyperswitch.client.model.MandateType;
import com.hyperswitch.client.model.PaymentMethodList;
import com.hyperswitch.client.model.PaymentType;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PaymentMethodListResponse
 */
@JsonPropertyOrder({
  PaymentMethodListResponse.JSON_PROPERTY_REDIRECT_URL,
  PaymentMethodListResponse.JSON_PROPERTY_PAYMENT_METHODS,
  PaymentMethodListResponse.JSON_PROPERTY_MANDATE_PAYMENT,
  PaymentMethodListResponse.JSON_PROPERTY_MERCHANT_NAME,
  PaymentMethodListResponse.JSON_PROPERTY_SHOW_SURCHARGE_BREAKUP_SCREEN,
  PaymentMethodListResponse.JSON_PROPERTY_PAYMENT_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-28T20:00:07.865622+05:30[Asia/Kolkata]")
public class PaymentMethodListResponse {
  public static final String JSON_PROPERTY_REDIRECT_URL = "redirect_url";
  private JsonNullable<String> redirectUrl = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PAYMENT_METHODS = "payment_methods";
  private List<PaymentMethodList> paymentMethods = new ArrayList<>();

  public static final String JSON_PROPERTY_MANDATE_PAYMENT = "mandate_payment";
  private MandateType mandatePayment;

  public static final String JSON_PROPERTY_MERCHANT_NAME = "merchant_name";
  private JsonNullable<String> merchantName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SHOW_SURCHARGE_BREAKUP_SCREEN = "show_surcharge_breakup_screen";
  private Boolean showSurchargeBreakupScreen;

  public static final String JSON_PROPERTY_PAYMENT_TYPE = "payment_type";
  private JsonNullable<PaymentType> paymentType = JsonNullable.<PaymentType>undefined();

  public PaymentMethodListResponse() {
  }

  public PaymentMethodListResponse redirectUrl(String redirectUrl) {
    this.redirectUrl = JsonNullable.<String>of(redirectUrl);
    
    return this;
  }

   /**
   * Redirect URL of the merchant
   * @return redirectUrl
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getRedirectUrl() {
        return redirectUrl.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REDIRECT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getRedirectUrl_JsonNullable() {
    return redirectUrl;
  }
  
  @JsonProperty(JSON_PROPERTY_REDIRECT_URL)
  public void setRedirectUrl_JsonNullable(JsonNullable<String> redirectUrl) {
    this.redirectUrl = redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = JsonNullable.<String>of(redirectUrl);
  }


  public PaymentMethodListResponse paymentMethods(List<PaymentMethodList> paymentMethods) {
    
    this.paymentMethods = paymentMethods;
    return this;
  }

  public PaymentMethodListResponse addPaymentMethodsItem(PaymentMethodList paymentMethodsItem) {
    if (this.paymentMethods == null) {
      this.paymentMethods = new ArrayList<>();
    }
    this.paymentMethods.add(paymentMethodsItem);
    return this;
  }

   /**
   * Information about the payment method
   * @return paymentMethods
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAYMENT_METHODS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<PaymentMethodList> getPaymentMethods() {
    return paymentMethods;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_METHODS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPaymentMethods(List<PaymentMethodList> paymentMethods) {
    this.paymentMethods = paymentMethods;
  }


  public PaymentMethodListResponse mandatePayment(MandateType mandatePayment) {
    
    this.mandatePayment = mandatePayment;
    return this;
  }

   /**
   * Get mandatePayment
   * @return mandatePayment
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MANDATE_PAYMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MandateType getMandatePayment() {
    return mandatePayment;
  }


  @JsonProperty(JSON_PROPERTY_MANDATE_PAYMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMandatePayment(MandateType mandatePayment) {
    this.mandatePayment = mandatePayment;
  }


  public PaymentMethodListResponse merchantName(String merchantName) {
    this.merchantName = JsonNullable.<String>of(merchantName);
    
    return this;
  }

   /**
   * Get merchantName
   * @return merchantName
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getMerchantName() {
        return merchantName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MERCHANT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMerchantName_JsonNullable() {
    return merchantName;
  }
  
  @JsonProperty(JSON_PROPERTY_MERCHANT_NAME)
  public void setMerchantName_JsonNullable(JsonNullable<String> merchantName) {
    this.merchantName = merchantName;
  }

  public void setMerchantName(String merchantName) {
    this.merchantName = JsonNullable.<String>of(merchantName);
  }


  public PaymentMethodListResponse showSurchargeBreakupScreen(Boolean showSurchargeBreakupScreen) {
    
    this.showSurchargeBreakupScreen = showSurchargeBreakupScreen;
    return this;
  }

   /**
   * flag to indicate if surcharge and tax breakup screen should be shown or not
   * @return showSurchargeBreakupScreen
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SHOW_SURCHARGE_BREAKUP_SCREEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getShowSurchargeBreakupScreen() {
    return showSurchargeBreakupScreen;
  }


  @JsonProperty(JSON_PROPERTY_SHOW_SURCHARGE_BREAKUP_SCREEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShowSurchargeBreakupScreen(Boolean showSurchargeBreakupScreen) {
    this.showSurchargeBreakupScreen = showSurchargeBreakupScreen;
  }


  public PaymentMethodListResponse paymentType(PaymentType paymentType) {
    this.paymentType = JsonNullable.<PaymentType>of(paymentType);
    
    return this;
  }

   /**
   * Get paymentType
   * @return paymentType
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public PaymentType getPaymentType() {
        return paymentType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<PaymentType> getPaymentType_JsonNullable() {
    return paymentType;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
  public void setPaymentType_JsonNullable(JsonNullable<PaymentType> paymentType) {
    this.paymentType = paymentType;
  }

  public void setPaymentType(PaymentType paymentType) {
    this.paymentType = JsonNullable.<PaymentType>of(paymentType);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentMethodListResponse paymentMethodListResponse = (PaymentMethodListResponse) o;
    return equalsNullable(this.redirectUrl, paymentMethodListResponse.redirectUrl) &&
        Objects.equals(this.paymentMethods, paymentMethodListResponse.paymentMethods) &&
        Objects.equals(this.mandatePayment, paymentMethodListResponse.mandatePayment) &&
        equalsNullable(this.merchantName, paymentMethodListResponse.merchantName) &&
        Objects.equals(this.showSurchargeBreakupScreen, paymentMethodListResponse.showSurchargeBreakupScreen) &&
        equalsNullable(this.paymentType, paymentMethodListResponse.paymentType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(redirectUrl), paymentMethods, mandatePayment, hashCodeNullable(merchantName), showSurchargeBreakupScreen, hashCodeNullable(paymentType));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentMethodListResponse {\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    paymentMethods: ").append(toIndentedString(paymentMethods)).append("\n");
    sb.append("    mandatePayment: ").append(toIndentedString(mandatePayment)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    showSurchargeBreakupScreen: ").append(toIndentedString(showSurchargeBreakupScreen)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

